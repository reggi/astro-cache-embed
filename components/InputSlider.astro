---
type Props = {
  id?: string,
  class?: string,
  value?: number,
  onchange?: string,
  style?: string,
  hideSelector?: boolean,
  showSelectorOnHover?: boolean
}

---

<input-slider {...Astro.props}/>

<script>

  class InputSlider extends HTMLElement {
    private isDragging: boolean;
    private volumeCurrent: HTMLElement | null;
    private volumeHandle: HTMLElement | null;
    private container: HTMLElement | null;

    volume: number
    volumePct: number

    get value(): number {
      return this.volume;
    }

    set value(newValue: number) {
      if (this.volume === newValue) return;
      this.volume = newValue;
      this.setAttribute('value', `${newValue}`);
      this.dispatchEvent(new Event('change'));
    }

    constructor() {
      super();
      this.attachShadow({ mode: 'open' }); // Attach a shadow root to the element
      this.isDragging = false;
      this.volumeCurrent = null;
      this.volumeHandle = null;
      this.volume = parseFloat(this.getAttribute('value'))
      this.volumePct = Math.round(this.volume * 100);
    }
    connectedCallback() {
      const hideSelector = this.getAttribute('hideSelector')
      const showSelectorOnHover = this.getAttribute('showSelectorOnHover')
      const style = this.getAttribute('style')

      this.shadowRoot!.innerHTML = `
        <style>
          .input-slider {
            width: 100%;
            display: inline-block;
            height: 7px;
            background-color: #9c9c9c;
            position: relative;
            cursor: pointer;
            border-radius: 5px;
            margin: 20px 0;
          }

          .input-slider-current {
            height: 100%;
            background-color: white;
            border-radius: 5px;
          }

          .input-slider-handle {
            ${hideSelector ? 'display: none;' : ''}
            width: 20px;
            height: 20px;
            background-color: white;
            position: absolute;
            top: -6px;
            border-radius: 50%;
            margin-left: -10px;
          }
        </style>
        <div class="input-slider" ${style ? ` style="${style}"` : ''}>
          <div class="input-slider-current" style="width: ${this.volumePct}%;"></div>
          <span class="input-slider-handle" style="left: ${this.volumePct}%;"></span>
        </div>
      `;
      this.container = this.shadowRoot!.querySelector('.input-slider');
      this.volumeCurrent = this.shadowRoot!.querySelector('.input-slider-current');
      this.volumeHandle = this.shadowRoot!.querySelector('.input-slider-handle');

      if (showSelectorOnHover) {
        this.addEventListener('mouseenter', () => {
          if (this.volumeHandle) this.volumeHandle.style.display = 'block';
        })
        this.addEventListener('mouseleave', () => {
          if (this.volumeHandle) this.volumeHandle.style.display = 'none';
        })
      }

      this.addEventListener('mousedown', this.startDragging);
      this.addEventListener('mousemove', this.dragging);
      this.addEventListener('mouseup', this.stopDragging);
    }

    disconnectedCallback() {
      this.removeEventListener('mousedown', this.startDragging);
      this.removeEventListener('mousemove', this.dragging);
      this.removeEventListener('mouseup', this.stopDragging);
    }

    startDragging = (e: MouseEvent) => {
      this.isDragging = true;
      this.updateVolume(e);
    }

    dragging = (e: MouseEvent) => {
      if (this.isDragging) {
        this.updateVolume(e);
      }
    }

    stopDragging = () => {
      this.isDragging = false;
    }

    updateVolume(e: MouseEvent) {
      if (!this.volumeCurrent || !this.volumeHandle) return;

      const rect = this.container.getBoundingClientRect();
      const x = e.clientX;
      let volume = (x - rect.left) / rect.width;
      volume = Math.max(0, Math.min(volume, 1)); // Constrain between 0 and 1

      this.volumeCurrent.style.width = `${volume * 100}%`;
      this.volumeHandle.style.left = `${volume * 100}%`;
      this.value = volume;
    }
  }
  customElements.define('input-slider', InputSlider);
</script>